// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4b\x53\xe4\x38\x12\xbe\xd7\xaf\xc8\xa0\x2f\xbb\x87\x06\x59\xb2\x65\xbb\x6e\x34\xd0\xf3\x68\x9a\x85\x82\x6e\x06\x6e\xb2\x94\xae\xd2\xe0\x92\xdc\x92\x5c\x8f\xf9\xf5\x1b\xf2\x83\x06\x7a\x60\x37\x36\x62\x76\x38\x29\xac\xcc\x2f\x5f\xdf\xa7\x4a\xde\xc1\x29\xd6\xa2\x6b\x02\x28\xdc\x60\x63\xdb\x35\x9a\x00\x01\x7d\x30\x18\x40\x2c\x85\x36\x3e\x80\xd3\xe6\x01\xab\xfd\x4c\xa2\x09\x4e\xd7\xdd\x12\x2f\x30\x6c\xad\x7b\x98\x83\xeb\xbc\xd7\xc2\xac\x74\xd3\xcc\x7a\x30\x6d\x10\xc2\x0a\x41\x8d\xb8\x66\xb0\xf4\x10\x56\x22\xc0\xc9\x23\x02\xac\x85\x36\x21\xe2\xcf\x26\x93\xf9\x0c\xe0\x1d\x9c\x5b\x29\x9a\x3e\x05\x6d\x96\x20\xad\x09\x4e\xc8\x00\x42\x29\x87\xde\xa3\x07\x83\xa8\x20\x58\xa8\x10\x3c\x06\xd8\xea\xb0\x02\x34\x1b\xd8\x08\xa7\x45\xd5\xa0\x3f\x9c\xc1\xe4\x1f\x21\x01\xb4\x9a\x03\x63\xac\x3f\x63\x58\xa1\xc3\x6e\x3d\x56\xf0\x8b\x9a\x43\xc1\x8a\xe1\xae\xb2\x36\xf8\xe0\x44\x7b\x89\xe8\xfc\xe0\x0b\xf0\x1e\x0e\x8e\x74\x9b\x1e\x25\x34\x3f\x24\x87\xe4\x30\x39\x0a\xb2\x3d\x62\x05\x25\xf4\x48\xb7\xb5\x3f\xba\x5a\xdf\x5c\xed\xaa\xed\x43\x77\x7f\x77\x77\x5a\x77\x7f\xdc\x54\xbb\xb3\xe3\x05\xde\x5c\x9c\x9c\xdb\x3f\xf6\xfb\x2c\x2b\x36\x57\x66\xf9\x75\x73\xf9\xf9\xf7\xf3\xbb\x87\x83\xff\x08\xcb\x26\xd8\xaf\x35\x3f\xbb\xe0\xeb\x87\x6f\xb7\xf8\xfb\xed\xa7\x5b\xfa\xed\xb2\x4b\xf8\x6f\xad\xfa\x89\x3d\xfc\x6a\x93\x1b\xb6\x5e\x89\xd5\xe5\x87\xec\x1a\x33\x93\x0c\xb0\x53\xbb\x8e\xa7\x6e\x4d\x45\x68\x85\x26\xe8\xb0\xff\x28\x64\xb0\x6e\x3f\x87\x83\x83\x17\x37\x0b\x5c\x6a\x1f\x9e\x5d\x09\x23\x57\xd6\x2d\xb0\xb5\x5e\xbf\xf0\x6a\xc5\x3e\x52\xe5\x5f\x55\xa3\x97\x22\x68\x6b\xfa\xbb\x7e\x80\x9f\x85\x36\x7f\x4a\xa7\x71\xce\x33\x78\xca\x9a\x21\xc1\x77\x70\xd1\xad\xd1\x69\x09\xbf\x9c\x82\xad\x7b\x06\x3d\xe1\xca\x77\xcf\x61\x98\x59\x32\x7a\x7d\x98\x26\x06\x8d\xf6\x21\x7a\x1a\xab\xf0\x47\xb2\xb5\xce\x6e\x74\x7f\x61\x7b\xec\x27\x09\x4c\xe9\xfd\x17\x0c\x60\xd9\x21\xa5\xd9\x21\x25\xe4\x30\xa5\x2f\x59\x90\xd0\x53\xf6\xc9\xda\xdb\x73\xad\xe5\xd5\xd7\xed\xcd\xea\xe6\xc3\x1d\xdf\x7d\x92\x97\xf6\xbc\xe6\x8b\xab\xbb\x5f\x3f\xb6\xdb\x3a\x71\x79\xb6\x3d\xdf\xd1\xfb\x05\x6b\x4f\x54\xf2\x92\x0b\x63\x80\x82\x1f\xd2\x84\xbc\x16\xe0\xea\xfe\xf3\x71\xf1\xd3\xe5\xcf\x6e\x73\x76\xff\xa1\xdc\xaa\x07\xfb\x45\x1e\x1f\xaf\x4f\xee\x7f\x6e\x4b\xdc\xef\xef\xd3\xeb\xb3\x62\xf9\xd1\xb1\xd5\xcd\xc5\x6f\x07\x63\x9f\xce\x46\xd6\x4f\x9d\x8c\x6d\x7e\x0f\x8b\x51\xd7\xaf\xe8\x22\x1d\x9d\xcf\x45\x6c\x11\x28\x6c\x1b\xbb\x47\x05\xd7\x6b\xe1\x02\x9c\x8c\x54\xf3\x50\x5b\xd7\x37\x75\xa9\x37\x68\x9e\xb5\xf3\x47\x3a\xc2\xab\x7c\x24\xbb\x92\x28\x5a\xa6\x59\x9e\x60\xce\x8a\x94\xf2\x32\x17\x9c\x57\xb9\x28\x4b\x41\x4a\xa5\xb8\xcc\x99\x62\x19\x57\x6f\x30\x97\xec\x4a\xce\x89\x24\xac\x54\x2c\x49\xd2\x8c\x89\x9a\xa8\xac\x90\x19\xe7\x3c\xa7\x4c\x95\x92\xd6\x22\x57\x1c\xe5\x1b\x1c\x27\xbb\xbc\x2e\xb2\x54\xd5\xa2\x2c\x48\x42\x55\x5e\x8b\x2c\x93\x05\x61\x55\x25\x28\xe5\xa4\x92\x0a\x31\xad\x32\x54\x6f\xa9\x81\xec\x78\x99\xd0\x82\xf0\x3c\xaf\x32\x8a\x4c\x8a\x3c\x41\x42\x19\xa2\xa2\xaa\x60\xb5\x28\x6b\x21\x59\xc5\xd3\xaa\xd7\x4d\x85\xce\x88\x66\x85\x7a\xb9\x0a\xfe\x7f\x13\x05\xfd\x3f\x8a\xe2\x2f\x96\xc4\xdf\x24\x88\x4f\x76\x23\xcc\xab\x72\xa0\x7f\x81\x1e\xde\x90\x43\x91\x55\x8c\xd6\xb9\x60\x75\x4a\xd2\x22\xa9\x13\xca\x58\x4a\xd2\x84\xe7\x44\x16\xb2\x42\x92\xd7\xb9\xca\x4b\xf9\xa6\x1c\xb2\x54\x20\xcb\x59\x4d\x4a\x5e\x8b\x9a\xaa\x8a\x57\x85\x48\x79\x9e\xe4\x92\x54\x65\x81\xb2\x16\x24\xcf\x94\x7a\x53\x0e\x69\x9a\xd6\x3c\x2d\x91\x91\x3c\x4d\x29\xe6\x5c\xca\x3a\x67\x79\xca\x39\x66\xb4\x4e\x38\x29\xab\xb2\xa0\x9c\xbc\x2d\x07\xc1\x14\xab\xd2\xac\x4e\x29\x25\x09\xa7\x24\x51\xb9\x54\xa9\xa4\x95\xa4\x49\xce\x79\x96\x16\x4c\x95\x04\xf9\xc1\x6c\xf6\x0e\x22\xd5\xde\x07\xfb\xbe\x45\x74\xb1\x6d\xb5\x5e\x76\xae\xc7\xf2\xb3\x96\xb6\xc3\xaa\x70\xa3\xd7\x68\xbb\x00\xdb\x15\x1a\xb0\x2d\x9a\x71\x63\x30\x28\x7b\xcb\x48\xec\x08\xe0\x67\x30\x7d\x1e\x5d\xe6\x70\xc0\x88\xef\x23\x5d\x75\xd8\xe1\x8b\x10\xfd\x08\x85\xdf\x1b\xb9\x72\xd6\xd8\xce\x47\xad\x48\xf4\x5e\x9b\xe5\xec\x5b\x74\x18\x12\x18\xf6\x1d\xdf\x4f\xdb\x74\xeb\x0a\x5d\x54\x5b\x24\x0c\x3a\x7f\x24\xad\xf1\x51\xc0\xa3\xf2\xb6\x51\x57\x15\x82\x68\x1a\x2b\x45\x40\x05\x22\x80\x0f\xc2\x85\xae\x9d\x41\xf4\xbf\x1d\x1c\xe7\x40\x7b\xf4\x8f\x0e\xd1\x43\xd7\xc2\xc9\xe5\x17\x90\x7b\xd9\xa0\x1f\x4a\x1d\x02\x80\xf6\xb0\x15\xba\x5f\x93\x62\xbe\xb8\x41\x13\x62\xa9\xc3\xf5\xad\xd0\x7d\xb5\x9f\xaf\xe7\x90\xc4\x42\x1f\x29\xef\x5b\x94\xba\xd6\xf2\x79\xd1\xb3\x89\xf2\x43\x69\xd7\xd8\x60\x24\xf3\x76\xa5\xe5\xea\x51\x0e\x20\xa4\xb4\x5d\xfc\x4d\xb7\xd0\x79\x9c\x5e\x25\x1b\x9b\x30\x3e\x27\x0a\xb4\xe9\x3f\xca\xce\x07\xbb\x1e\x83\x40\xad\x1b\x9c\xc1\xb4\x16\x1e\x0f\x30\x17\x62\x8d\x73\x38\x88\xab\xe0\xc1\xe3\xf2\x17\x93\x99\x80\x1f\xe3\xca\x46\xc7\x55\x22\x3e\x64\xf0\x8f\x2d\x82\xc3\x6f\x9d\x76\x08\x5b\x0f\xd6\x81\x6e\xe5\xb8\x11\xc6\x05\x30\x1e\xa5\x08\x31\xed\xbe\x25\xff\x8c\xdd\xb5\x0a\xbf\x2c\xce\xe7\xb0\xf5\xf3\xa3\xa3\x38\x80\x66\x65\x7d\x98\x97\x59\xca\xa7\x51\xf6\xfb\xea\x52\xc4\x4a\xb4\x8c\xc9\x2e\x85\xbf\x8c\xc7\x39\x24\x64\xfa\xfb\xc1\xb8\xd1\x6b\x1d\x06\xe3\xf3\x78\x9c\x43\x9a\x27\x94\x15\xc5\x33\x8a\x06\xdb\xcf\x6a\x20\x96\xf9\x5e\x57\x70\xc2\x78\xd1\xd3\x75\xaa\x40\xa9\x61\xbf\x15\x50\x35\x56\x3e\x80\x30\x6a\x2c\x04\x82\xd3\xcb\x25\x3a\x54\x03\xa1\x03\xee\xc2\x34\xe6\x81\xd4\x9c\x44\x56\xbf\x16\xd8\xa1\x50\x60\x4d\xb3\x8f\x62\x99\xa8\x3e\x2d\xf9\x53\x4a\xdf\xa1\x17\x28\xd4\x73\xf8\x24\x1b\xd1\x2f\xe2\x1c\x9e\xe6\xde\x5a\xdb\xc0\x5a\xec\xc0\x61\x70\x7a\xf8\x4d\xf1\x68\x14\x88\x67\x66\x76\x83\x6e\x06\xd1\x70\x31\xd8\xcd\x81\x8e\x3d\xfd\x73\x48\x6d\x02\xba\x8d\x68\x7a\xdc\xfd\x40\x7f\x11\x13\x94\x9d\x73\xfd\x72\xf9\xc4\x63\x25\x3c\x54\x88\x71\xfb\x0c\x28\x43\xdf\xa6\x09\x20\xc6\x8b\xaf\x19\x1d\x2b\x38\xd5\xbe\xe7\x4a\x8f\xe8\xed\xfa\x07\xae\x79\x50\x16\x8c\x0d\xe0\xbb\xb6\xb5\x2e\x40\xd8\xf5\x19\x89\x56\xc7\xff\x2f\x76\x97\xd6\x36\xc7\x32\x3e\x0a\x67\x26\x22\xa9\x39\x04\xd7\x61\x54\x9a\x30\x7b\x50\x58\x75\xcb\xe5\xf8\x20\x45\x01\xf4\xf2\x5f\x5a\x88\x41\x66\xfd\xed\x20\xb4\xb6\x75\xb6\xee\xc7\xf3\xe8\x32\x83\xe1\xeb\x1c\x6a\xd1\x78\x9c\xfd\x3b\x00\x00\xff\xff\xbc\x1e\x8e\x26\xa6\x0d\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 3494, mode: os.FileMode(420), modTime: time.Unix(1542883920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc9\x6e\xe3\x48\x0c\x86\xef\x7a\x0a\x81\x97\x5c\xbc\xd4\xbe\xbd\xc1\x20\x98\xd3\x0c\x90\x33\xab\xc8\x8a\x05\xdb\xb2\x5a\x4b\x12\x23\xc8\xbb\x37\xe4\x38\x9d\x6b\x1a\xba\x90\x04\x7f\xfe\xa4\xea\xe3\xf9\xc0\x23\x2f\xe7\xd4\xb4\x2d\x96\x72\x59\xfa\x79\x5a\xe3\xb6\x3d\x63\xd7\xa7\xf6\x16\xb6\xed\x91\xaf\xa9\x7d\x78\x07\x24\x1a\x79\x9a\x20\x41\x88\x59\x60\x70\x36\xe8\x62\x8c\x31\x58\x2a\x79\x99\x8d\xd3\x2c\x48\x17\x6b\x91\xa5\x91\x0a\x2d\x6c\xa0\x8c\xd7\x61\xbe\x40\x7a\x87\xd2\x0d\x07\x1e\x21\x01\xf2\xb4\x95\x2a\x6c\xcb\x3c\xae\x0d\xb7\xf2\xcc\x6f\x33\x24\x28\xde\xc7\x1a\xb4\x8f\xe4\xbd\xa0\xa8\x4a\x2d\x92\x88\x0c\x86\xaa\x25\x59\x14\x48\x25\x54\x85\x22\x2b\x94\x46\x48\xed\x05\x69\xa7\x45\xd5\xa1\x88\x12\xf0\xcf\xbc\x01\x47\x3c\x4f\xab\x6d\xf7\x02\x09\xb4\x2b\xd2\x05\xf6\x3a\xd7\x18\x44\x65\x6f\xb3\xf0\xca\xd7\x10\x05\x7a\x89\x04\x1f\x1b\x38\x52\x85\x04\xd3\x6d\x61\xb8\xa5\xdf\x43\xe8\x78\xe2\x1e\x92\x56\x1b\xe8\x21\x29\xa7\xa4\x31\x1b\x18\x20\xc9\x0d\x8c\x90\xc2\x06\x26\x3c\xad\x07\x10\xcb\xcc\xd2\xb1\x2e\x31\xc8\x68\x0c\x49\x2e\xa8\x72\xc8\xca\xb3\x61\xc7\x22\xdb\x5c\xb3\xd1\x99\x85\xf6\x0e\x2d\x85\x10\x62\x45\xe7\x23\xaa\x20\x95\x5a\x17\x39\x63\x59\x7f\x45\x91\x2a\xe4\x20\xad\xb5\x36\xa3\x64\x24\x5f\x90\xa3\x70\x82\x43\x30\x0a\x6b\xc1\xa0\xad\x23\xe1\x8c\xb5\x99\x22\x5a\x6f\x55\x46\x57\x4b\x11\x51\x71\x5d\x27\x75\x04\x09\x8c\x65\xe1\x04\xba\x2d\x29\xe4\xad\xd1\x39\x6c\xa3\x52\x75\x6b\x4c\x50\xd1\xc4\x48\xda\x13\x6c\xe0\x85\xc7\xa9\xbb\xac\x47\x7e\x3c\xdc\x1f\x7e\xc0\x69\x7a\xbd\x8c\x94\xda\x87\xaf\xd2\x9d\x81\xd4\xfe\x14\x81\xa6\xe9\x88\xfb\xb9\x9b\xaf\xff\x50\x6a\x41\xbc\x09\xf9\xfd\x41\xd3\xfc\x5a\x78\xe1\x15\xba\x7e\x39\x3f\x5d\xc6\x23\x8f\x53\x6a\x55\xd3\xb6\xaf\xb7\xe4\x09\xbb\xf9\xff\xee\xcc\xff\xfe\x97\x5a\xd9\x34\x47\xbe\xde\x08\x9d\xba\xe7\xbe\xeb\x9f\x3f\x61\x1d\x96\x7c\xea\xca\xe3\x4a\xe9\x6e\xb7\xdf\xed\xf6\x79\xe9\x4e\xb4\x1f\x79\xba\x2c\x63\xe1\x69\x7f\xef\x7e\xe4\xeb\x6e\x58\xf2\x6e\xe0\xf3\xa7\x6e\xec\x5e\x70\xe6\x9f\x09\x8f\xab\xf8\x26\xe4\xf9\x80\xcb\x7c\xf8\xa1\xf7\xbd\xfb\x2f\x8d\xbf\x54\x5f\xae\xbf\x03\x00\x00\xff\xff\xb0\x1c\xaf\x3f\xaa\x03\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 938, mode: os.FileMode(420), modTime: time.Unix(1540471826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
